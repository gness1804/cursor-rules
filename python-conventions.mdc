---
globs: *.py
description: Python coding standards and conventions for the workspace
---

# Python Conventions

## Code Style
- Follow PEP 8 with line length of 240 characters (as configured in [pyproject.toml](mdc:pyproject.toml))
- Use Ruff for linting and formatting (configured in [pyproject.toml](mdc:pyproject.toml))
- Enable pycodestyle (E), Pyflakes (F), and Pylint (PL) rules
- Allow autofix for all enabled rules
- Target Python 3.10+

## Project Structure
- Use Pipenv for dependency management (see [Pipfile](mdc:nunu/Pipfile))
- Organize code in logical modules under `src/` directory
- Keep tests in corresponding `test/` directories
- Use Alembic for database migrations

## Key Libraries and Patterns
- **SQLAlchemy** - Use for database operations with proper session management
- **Temporal.io** - For workflow orchestration and background tasks
- **Boto3** - For AWS service integration
- **Pydantic/Marshmallow** - For data validation and serialization
- **Factory Boy** - For test data generation

## Database Patterns
- Use SQLAlchemy ORM with proper session management
- Implement database adapters for data transformation
- Use Alembic migrations for schema changes
- Follow the pattern: Import → Transform → Export

## AWS Integration
- Use boto3 with proper error handling
- Implement retry logic for transient failures
- Use environment-specific configurations
- Follow least-privilege security principles

## Testing
- Use unittest framework with Factory Boy for test data
- Mock external dependencies (AWS, APIs)
- Include integration tests for critical workflows
- Use coverage reporting for test completeness

## Error Handling
- Use structured logging with appropriate levels
- Include context in error messages
- Implement proper exception handling with specific exception types
- Use time-machine for time-dependent testing